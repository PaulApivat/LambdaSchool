######################################################################### Array Methods - Common Elements
// Write a function called commonElements that has parameters for two arrays. 
// Return an array of all items that are present in both arrays. 

function commonElements(arr1, arr2) {
  // declare empty array
  let first = [];
  // loop through first array
  for (i = 0; i < arr1.length; i++){
  // loop through second array
    for (j = 0; j < arr2.length; j++) {
  // if an item in the first and second array are equal
      if (arr1[i] === arr2[j]) {
  // add item to empty array
        first.push(arr1[i]);
      }
    }
  }
  return first;
}

// return ['a']
commonElements(['a', 'b', 'c'], ['x', 'y', 'z', 'a'])

####### Alternative Solution - Array Methods - Common Elements ######
// v1.0 for loop
function commonElements(arr1, arr2) {
  const matches = [];                        //empty array called 'matches'
  let i, len = arr1.length;                  
  for (i = 0; i < len; i++) {               //loop through first array
    if (arr2.includes(arr1[i])) {           // if second array .includes() item in first array
      if(!matches.includes(arr1[i])) {      // if empty array does not include item from first array
        matches.push(arr1[i]);              // push item from first array into 'matches' array
      }
    }    
  }
  return matches;
}

// v1.1
// function commonElements(arr1, arr2) {    
// let unique = new Set(arr1);                 // declare new object Set to store arr1
// const matches = [];                         // empty array called 'matches'
// for (let item of unique) {                  // for let loop through item in arr1
//   if (arr2.includes(item)) {                // if item is in arr2
//     matches.push(item);                     // push item into empty array 'matches'
//     }
//   }
// return matches;
// }

// // v1.2 Array method .forEach()
// function commonElements(arr1, arr2) {       
//   const matches = [];                         //empty array called 'matches'
//   arr1.forEach(element => {                   //forEach method loop through arr1
//     if (arr2.includes(element)) {             // if arr2 includes element
//       if(!matches.includes(element)) {        // if empty array does not include item from first array, thats included in arr2
//         matches.push(element);                // push item into empty array 'matches'
//       }
//     }
//   });
//   return matches;
// }

// // v2.0
// function commonElements(arr1, arr2) {
//   return arr1.filter((element, position) => {
//     if (arr1.indexOf(element) === position)
//       return arr2.includes(element);
//   });
// }

console.log(commonElements([1, 2, 3, 4, 4, 6], [3, 4, 5, 6])); // <--- [ 3, 4, 6 ]

######################################################################## Reverse Number
// Write a function called reverseNumber that reverses a number.

function reverseNumber(num) {
  // convert number to string, using .toString()
  let numstr = num.toString();
  // use split method to split up string, store in newnumstr
  let newnumstr = numstr.split("");
  // use reverse method on newnumstr, assign to rev
  let rev = newnumstr.reverse();
  // use join method on rev, assing to newNum
  let newNum = rev.join("");
  // convert from string to number, assign to finNum
  let finNum = Number(newNum);
  return finNum;
}

reverseNumber(12345);

######### Alternative Solution - Reverse Number
// v1.0
function reverseNumber (num) {
  let str = num.toString();
  let len = str.length;
  let reversed = '';
  for (let i = len; i > 0; i--) {
    reversed += str[i - 1];
  }
  let result = Number(reversed);
  return result;
}

// // v2.0
// function reverseNumber (num) {
//   // console.log(num);
//   let string = num.toString();
//   // console.log(string);
//   // console.log(typeof(string));
//   let arr = string.split('');
//   // console.log(arr);
//   let reverse = arr.reverse();
//   // console.log(reverse);
//   let join = reverse.join('');
//   // console.log(join);
//   let result = Number(join);
//   return result;
// }

// // v3.0 Number()
// function reverseNumber (num) {
//   return Number(num
//     .toString()
//     .split('')
//     .reverse()
//     .join(''));
// }

// // v4.0 parseInt()
// function reverseNumber(num) {
//   return parseInt(num
//     .toString()
//     .split('')
//     .reverse()
//     .join(''));
// }

// // v5.0 Arithmetic Operators *=, +=, -=, /= and % (modulo operator)
// function reverseNumber(num) {
//   let number = num;
//   let reversed = 0;
//   while (number !== 0) {
//     reversed *= 10;
//     reversed += number % 10;
//     number -= number % 10;
//     number /= 10;
//     // console.log(`reversed: ${reversed}, number: ${number}`);
//   }
//   return reversed;
// }

// // v5.1
// function reverseNumber(num) {
//   const arr = [];
//   // This takes numbers from right to left on the num variable
//   while (num > 0) {
//     arr.push(num % 10);
//     num = Math.floor(num / 10);
//   }
//   return Number(arr.join(''));
// }

// alternative solution (Matthew Meitl) :parseInt
function reverseNumber(num) {
  return parseInt(num.toString().split('').reverse().join(''));
}

// alternative solution (Ryan McLaughlin): parseInt similar
function reverseNumber(num) {
 num = num + "";
 let reverse = num.split("").reverse().join("");
   return parseInt(reverse); 
}

######################## REVERSE CASING
// Write a function that takes in a string, reverses the 'casing' of that string, and returns the "reversed-casing" string.

function reverseCase(str) {
  //turn string into Array
      let array = str.split("");
  //loop through Array
      for (i = 0; i < array.length; i++) {
  //check if string Uppercase, turn to lowercase
      if (array[i] === array[i].toUpperCase()) {
  // change to lowercase
      array[i] = array[i].toLowerCase();
    } else {
  // change to uppercase
      array[i] = array[i].toUpperCase();
    }
  }

  //turn array back to string
  let newStr = array.join("");
  //return string
  return newStr
}

reverseCase("JAVASCRIPT is fun55!");





