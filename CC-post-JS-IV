//============================================================ STACK =============================================================//
//Now that you have been introduced to JavaScript classes, let's make a class called "Stack" and give it this LIFO functionality. 
//Our Stack class's storage will be an Array. You'll want to make two methods in you Stack class: add and remove. 
//The add method will push an item into storage. The remove method will remove the last item in storage.

class Stack {
  constructor(stackAttribute) {
    this.storage = [];
  }
  
  add(item){
    this.storage.push(item);
    // console.log(this.storage);
  }
  
  remove(item){
    this.storage.pop(item);
    // console.log(this.storage);
  }
  
  numOfItems(){
    if (this.storage.length === 0){
      return 'There are no items in your Stack.'
    } else {
      return this.storage.length;
    }
  }
}


const myStack = new Stack();
console.log(myStack.numOfItems()); // <--- "There are no items in your Stack."
myStack.add('first');
myStack.add('second');
myStack.add('third');
console.log(myStack.numOfItems()); // <--- 3
console.log(myStack.storage);      // <--- [ 'first', 'second', 'third' ]
myStack.remove();
console.log(myStack.storage);      // <--- [ 'first', 'second' ]
myStack.remove();
console.log(myStack.storage);      // <--- [ 'first' ]
myStack.remove();
console.log(myStack.storage);      // <--- []
console.log(myStack.numOfItems()); // <--- "There are no items in your Stack."



//============================================================ VOWEL COUNT =============================================================//

## my solution ##
// Write a function which counts the number of vowels in a given string. Return the count number.

function vowelCount(str) {
  let vowelArray = str.match(/[aeiou]/ig);          // set regex to match vowels
  return vowelArray ? vowelArray.length : 0;        // if there's a match, return vowelArray.length, else 0;
}

## PM Solution ##

function vowelCount(str) {
  const vowels = 'aeiouAEIOU'.split('');              //  split individual characters into own array, set to vowels
  let count = 0;                                      //  set count = 0
  str.split('').forEach(letter => {                   //  split str, forEach letter..
    vowels.includes(letter) ? count++ : null;         //  if vowels .includes() letter, increment count, else null;
  });   
  return count;
}

console.log(vowelCount('-bcd-fgh-jklmn-pqrst-vwxyz')); // <--- 0
console.log(vowelCount('Hello world!')); // <--- 3
console.log(vowelCount('Pinto beans')); // <--- 4
console.log(vowelCount('The quick brown fox jumped over the lazy dog.')); // <--- 12
console.log(vowelCount('Four score and seven years ago our fathers brought forth on this continent, a new nation, conceived in Liberty, and dedicated to the proposition that all men are created equal.')); // <--- 58
console.log(vowelCount('All I have ever wanted is to be an Uber driver!')); // <--- 16

//============================================================ TO BINARY STRING =============================================================//
// Given a positive (or 0) number, return a string of 1's and 0's representing it's binary value: toBinaryString(6) should return "110" (no leading 0).
// WITHOUT Use of the native method number.toString(2).

#### Short-Cut ####
function toBinaryString(number {
  return number.toString(2);
}

// My solution
function toBinaryString(number) {
  let newNum = number;
  let emptyArray = [];
  if (number === 0) {
    return '0';
  } else {
    while (newNum > 0) {

      let remainder = newNum % 2;
      emptyArray.push(remainder)
      newNum = (newNum - remainder) / 2;
      // console.log(newNum)
      // break;
    }
  }
  return emptyArray.reverse().join("");
}

/////////// PM Solution /////////////

function toBinaryString(number) {
    let remainders = [];
    do {
      remainders.unshift(number % 2);       // main step
      number = Math.floor(number / 2);      // main step
    } while (number > 0);
    return remainders.join('');
}


console.log(toBinaryString(0));  // <--- 0
console.log(toBinaryString(1));  // <--- 1
console.log(toBinaryString(2));  // <--- 10
console.log(toBinaryString(3));  // <--- 11
console.log(toBinaryString(4));  // <--- 100
console.log(toBinaryString(5));  // <--- 101
console.log(toBinaryString(6));  // <--- 110
console.log(toBinaryString(7));  // <--- 111
console.log(toBinaryString(8));  // <--- 1000
console.log(toBinaryString(9));  // <--- 1001
console.log(toBinaryString(10)); // <--- 1010
console.log(toBinaryString(11)); // <--- 1011
console.log(toBinaryString(12)); // <--- 1100
console.log(toBinaryString(13)); // <--- 1101
console.log(toBinaryString(14)); // <--- 1110
console.log(toBinaryString(15)); // <--- 1111
console.log(toBinaryString(16)); // <--- 10000

######### to Binary (Additional Solutions) ###########
/////// Alternative One /////////

function toBinaryString(number) {
  let tempArr = [];
  if (number < 0) {
    console.log("Please enter a positive number.");
  }
  
  else if(number === 0) {
    return "0";
  }
  
  else {
    while(number > 0) {
      tempArr.unshift(number % 2);
      number >>= 1;
    }
    return tempArr.join('');
  }
}

/////// Alternative Two /////////

function toBinaryString(number) {
  let num = number;
  let result = []; 
    if(num === 0){
      result.push(num); 
  } else {
      while(num >= 1 ){
        result.unshift(Math.floor(num%2));
        num = num/2;
      }
    }
    return result.join("");
}




